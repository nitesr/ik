# coding:: utf-8
#
# Letter Case Permutation
#   Given a string, return all strings that can be generated by changing case of one or more letters in it.
#
#   Return strings in any order.
# Example 1:
#   Input: s = 'a1z'
#   Output: ["A1Z", "A1z", "a1Z", "a1z"]
#
# Example 2:
#   Input: s = '123'
#   Output: ['123']
#
#  Constraints:
#   Input string may contain only: 'a'..'z', 'A'..'Z', '0'..'9'
#   1 <= length of the string <= 12

import unittest
import random

from typing import List
def letter_case_permutations(s):
    """
    Args:
     s(str)
    Returns:
     list_str
    """
    # Solution:
    #  
    #
    #   Time Complexity: 
    #   Space Compelxity: 
    #
    # Edge cases:
    if s is None or len(s) == 0:
        return []
    
    perms = []
    def case_permutes_helper(ptr, permute):
        if ptr == len(s):
            perms.append(''.join(permute))
            return
        
        if s[ptr].isnumeric():
            permute.append(s[ptr])
            case_permutes_helper(ptr+1, permute)
            permute.pop()
        else:
            permute.append(s[ptr].upper())
            case_permutes_helper(ptr+1, permute)
            permute.pop()

            permute.append(s[ptr].lower())
            case_permutes_helper(ptr+1, permute)
            permute.pop()
    case_permutes_helper(0, [])
    return perms
    
class Testcase(unittest.TestCase):
    def test_example1(self):
        s = 'a1z'
        actual = letter_case_permutations(s)
        expected = ["A1Z", "A1z", "a1Z", "a1z"]
        self.assertListEqual(expected, actual, "Example1") 

    def test_example2(self):
        s = '123'
        actual = letter_case_permutations(s)
        expected = [ '123' ]
        self.assertListEqual(expected, actual, "Example2") 
    
    def test_one(self):
        s = 'a'
        actual = letter_case_permutations(s)
        expected = [ 'A', 'a' ]
        self.assertListEqual(expected, actual, "one") 
        

if __name__ == '__main__':
    unittest.main()